name: Deployment Astoria Front end Development

# Controls when the action will run.
on:
# Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  create-deployment-artifacts:
    name: Create Deployment Artifacts
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Configure Node
        uses: actions/setup-node@v3
        with:
          node-version: 8.17.0
      
      - name: build project
        run: |
          npm install
          npm run build:prod

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          cd dist
          tar -czf "${GITHUB_SHA}".tar.gz *

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: dist/${{ github.sha }}.tar.gz
          retention-days: 1

      - name: Export deployment matrix
        id: export-deployment-matrix
        run: |
          JSON="$(cat ./deployment-config-dev.json)"
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "::set-output name=deployment-matrix::$JSON"

  prepare-release-on-servers:
    name: "${{ matrix.server.name }}: Prepare release"
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: app-build
          
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path }}/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            tar xzf ${{ matrix.server.path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.path }}/releases/${GITHUB_SHA}"

  # run-before-hooks:
  #   name: "${{ matrix.server.name }}: Before hook"
  #   runs-on: ubuntu-latest
  #   needs: [ create-deployment-artifacts, prepare-release-on-servers ]
  #   strategy:
  #     matrix:
  #       server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
  #   steps:
  #   - name: Run before hooks
  #     uses: appleboy/ssh-action@master
  #     env:
  #       GITHUB_SHA: ${{ github.sha }}
  #       RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
  #       ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
  #       STORAGE_PATH: ${{ matrix.server.path }}/storage
  #       BASE_PATH: ${{ matrix.server.path }}
  #     with:
  #       host: ${{ matrix.server.ip }}
  #       username: ${{ matrix.server.username }}
  #       key: ${{ secrets.SSH_KEY }}
  #       port: ${{ matrix.server.port }}
  #       envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
  #       script: |
  #         ${{ matrix.server.beforeHooks }}

  # activate-release:
  #   name: "${{ matrix.server.name }}: Activate release"
  #   runs-on: ubuntu-latest
  #   needs: [ create-deployment-artifacts, prepare-release-on-servers, run-before-hooks ]
  #   strategy:
  #     matrix:
  #       server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
  #   steps:
  #     - name: Activate release
  #       uses: appleboy/ssh-action@master
  #       env:
  #         GITHUB_SHA: ${{ github.sha }}
  #         RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
  #         ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
  #         BASE_PATH: ${{ matrix.server.path }}
  #       with:
  #         host: ${{ matrix.server.ip }}
  #         username: ${{ matrix.server.username }}
  #         key: ${{ secrets.SSH_KEY }}
  #         port: ${{ matrix.server.port }}
  #         envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,BASE_PATH
  #         script: |
  #           ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH

  # clean-up-server:
  #   name: "${{ matrix.server.name }}: Clean up"
  #   runs-on: ubuntu-latest
  #   needs: [ create-deployment-artifacts, prepare-release-on-servers, run-before-hooks, activate-release ]
  #   strategy:
  #     matrix:
  #       server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
  #   steps:
  #     - name: Remove old releases and artifacts from server
  #       uses: appleboy/ssh-action@master
  #       env:
  #         RELEASES_PATH: ${{ matrix.server.path }}/releases
  #         ARTIFACTS_PATH: ${{ matrix.server.path }}/artifacts
  #       with:
  #         host: ${{ matrix.server.ip }}
  #         username: ${{ matrix.server.username }}
  #         key: ${{ secrets.SSH_KEY }}
  #         port: ${{ matrix.server.port }}
  #         envs: RELEASES_PATH
  #         script: |
  #           cd $RELEASES_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
  #           cd $ARTIFACTS_PATH && ls -t -1 | tail -n +6 | xargs rm -rf

  # cleanup-github:
  #   needs: [ create-deployment-artifacts, prepare-release-on-servers, run-before-hooks, activate-release, clean-up-server ]
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: call webhook to delete artifacts
  #     env:
  #       FOR_WEBHOOKS_SECRET: ${{ secrets.FOR_WEBHOOKS_SECRET }}
  #     run: |
  #       echo "::add-mask::$FOR_WEBHOOKS_SECRET"
  #       curl --verbose --fail --show-error --location --request POST "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" --header "Authorization: token $FOR_WEBHOOKS_SECRET" --header 'Content-Type: application/json' --header 'Accept: application/vnd.github.everest-preview+json' --data-raw "{ \"event_type\": \"delete_all_artifacts\", \"client_payload\": {\"parent_runid\": \"$GITHUB_RUN_ID\", \"parent_repo\": \"$GITHUB_REPOSITORY\"} }"